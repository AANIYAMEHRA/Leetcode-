Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.


CODE //


ListNode* reverseKGroup(ListNode* head, int k) {
        ListNode* temp = head;
        int cnt = 0;

        //check if k nodes exist
        while(cnt < k){
            if(temp == NULL){
                return head;
            }
            temp = temp->next;
            cnt++;
        }

        //recursively call for rest of LL
        ListNode* prevNode = reverseKGroup(temp, k);

        //reverse current group
        temp = head; cnt = 0;
        while(cnt < k){
            ListNode* next = temp->next;
            temp->next = prevNode;

            prevNode = temp;
            temp = next;

            cnt++;
        }
        return prevNode;
    }
