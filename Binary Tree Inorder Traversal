Given the root of a binary tree, return the inorder traversal of its nodes' values.
Example 1:
Input: root = [1,null,2,3]
Output: [1,3,2]
Explanation:


Example 2:
Input: root = [1,2,3,4,5,null,8,null,null,6,7,9]
Output: [4,2,6,5,7,1,3,9,8]
Explanation:


Example 3:
Input: root = []
Output: []


Example 4:
Input: root = [1]
Output: [1]


CODE //

class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> ans;
        TreeNode* curr = root;

        while(curr != NULL){
            if(curr->left == NULL){
                ans.push_back(curr->val);
                curr = curr->right;
            }else{
                //find the IP
                TreeNode* IP = curr->left;
                while(IP->right != NULL && IP->right != curr){
                    IP = IP->right;
                }

                if(IP->right == NULL){
                    IP->right = curr;   //CREATE
                    curr = curr->left;
                }else{
                    IP->right = NULL;
                    ans.push_back(curr->val);  //DESTROY
                    curr = curr->right;
                }
            }
        }
        return ans;
    }
};
