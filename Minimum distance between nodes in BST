Given the root of a Binary Search Tree (BST), return the minimum difference between the values of any two different nodes in the tree.

Example 1:
Input: root = [4,2,6,1,3]
Output: 1

Example 2:
Input: root = [1,0,48,null,null,12,49]
Output: 1
 
Constraints:

The number of nodes in the tree is in the range [2, 100].
0 <= Node.val <= 105


CODE //

class Solution {
public:
    TreeNode* prev = NULL;

    int minDiffInBST(TreeNode* root) {
        if(root == NULL){
            return INT_MAX;
        }

        int ans = INT_MAX;
        if(root->left != NULL){
            int leftMin = minDiffInBST(root->left);
            ans = min(ans, leftMin);
        }

        if(prev != NULL){
            ans = min(ans, root->val - prev->val);
        }

        prev = root;

        if(root->right != NULL){
            int rightMin = minDiffInBST(root->right);
            ans = min(ans, rightMin);
        }
        return ans;
    }
};
