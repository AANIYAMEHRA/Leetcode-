Given are N boards of ith length of each given in the form of array, and M painters, such that each painter takes 1 unit of time to paint 1 unit of board. 
The task is to find the minimum time to paint all boards under the constraints that any painter will only paint continuous section.


CODE //

#include <iostream>
#include <vector>
using namespace std;

bool isPossible(vector<int> &arr, int n, int m, int mid){
    
    int painters=1, times=0;
    
    for(int i=0; i<n; i++){
        if(times + arr[i] <= mid){
            times += arr[i];
        }else{
            painters++;
            times = arr[i];
        }
    }
    
    return (painters <= m); 
}

int paintPartition(vector<int> &arr, int n, int m){   //O(log(sum)*n)
    
    int sum=0, maxValue=-10000;
    
    for(int i=0; i<n; i++){   
        sum += arr[i];
        maxValue = max(maxValue, arr[i]);
    }
    
    int st = maxValue, end  = sum;
    int ans = -1;
    
    
  while(st <= end){
        int mid = st + (end-st)/2;
        
        if(isPossible(arr, n, m, mid)){  // left
            ans = mid;
            end = mid-1;
        }else{   //right
            st = mid+1;
        }
    }
    
    return ans;
    
}

int main()
{
    vector<int> arr={40,30,10,20};
    int n=4, m=2;
    cout<<"Minimum time required to paint maximum boards = "<<paintPartition(arr,n,m)<<endl;

    return 0;
}
